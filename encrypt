#!/bin/bash
function doEncrypt(){
    echo "Encrypting using RSA key $key" >&2
    mkdir -p ~/bin/rsa/keyTemp 2>/dev/null
    cp "$key" ~/bin/rsa/keyTemp/id_rsa.pub
    chmod 600 ~/bin/rsa/keyTemp/id_rsa.pub
    ssh-keygen -f ~/bin/rsa/keyTemp/id_rsa.pub -e -m pem > ~/bin/rsa/keyTemp/id_rsa.pem
    openssl rsa -in ~/bin/rsa/keyTemp/id_rsa.pem -RSAPublicKey_in -pubout > ~/bin/rsa/keyTemp/encrypt.pem 2> /dev/null
    if [ -z "$outfile" ] && [ ! -f "$outfile" ]; then
        echo "$message" | openssl rsautl -encrypt -inkey ~/bin/rsa/keyTemp/encrypt.pem -pubin | base64 | tr -d '\n'
    else
        echo "$message" | openssl rsautl -encrypt -inkey ~/bin/rsa/keyTemp/encrypt.pem -pubin | base64 | tr -d '\n' > "$outfile"'.swp'
	if [ "$(cat "$outfile"'.swp' | wc -c)" != "0" ]; then
            mv "$outfile"'.swp' "$outfile"
        else
            rm "$outfile"'.swp'
        fi
    fi
    cleanup
    exit 0
}

function cleanup(){
rm ~/bin/rsa/keyTemp -rf 2>/dev/null
}

function help(){
   echo "encrypt [options]"
   echo "Options:"
   echo "--help, -h Display help message"
   echo "--infile, -f File to encrypt"
   echo "--inkey, -k Key to use to encrypt with"
   echo "--outfile, -o output file."
   exit 0
}

if [ "$#" == "0" ]; then
    help
fi

for i in "$@"
do
case $i in
    -f=*|--infile=*)
        infile="${i#*=}"
    ;;
    -k=*|--inkey=*)
        key="${i#*=}"
    ;;
    -o=*|--outfile=*)
        outfile="${i#*=}"
    ;;
    -h|--help)
        help
    ;;
esac
done

if [ -z "$key" ] || [ ! -f "$key" ]; then
    echo Missing encryption key>&2
    exit
fi
if [ -z "$infile" ]; then    
    read -p "Enter message to be encrypted: " -s message
    echo >&2
elif [ ! -f "$infile" ]; then
   echo "No such file \"$infile\"." >&2
   exit 1
else
    message=`cat "$infile"`
fi
doEncrypt 
